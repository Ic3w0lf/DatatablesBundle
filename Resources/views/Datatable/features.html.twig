{##
 # This file is part of the SgDatatablesBundle package.
 #
 # (c) stwe <https://github.com/stwe/DatatablesBundle>
 #
 # For the full copyright and license information, please view the LICENSE
 # file that was distributed with this source code.
 #}
"autoWidth": {{ view_features.autoWidth ? 'true' : 'false' }},
"deferRender": {{ view_features.deferRender ? 'true' : 'false' }},
"info": {{ view_features.info ? 'true' : 'false' }},
"jQueryUI": {{ view_features.jQueryUI ? 'true' : 'false' }},
"lengthChange": {{ view_features.lengthChange ? 'true' : 'false' }},
"ordering": {{ view_features.ordering ? 'true' : 'false' }},
"paging": {{ view_features.paging ? 'true' : 'false' }},
"processing": {{ view_features.processing ? 'true' : 'false' }},
"scrollX": {{ view_features.scrollX ? 'true' : 'false' }},
"scrollY": "{{ view_features.scrollY }}",
"searching": {{ view_features.searching ? 'true' : 'false' }},

{# "serverSide" -> Ajax.html.twig #}

"stateSave": {{ view_features.stateSave ? 'true' : 'false' }},
"delay": {{ view_features.delay }},

{% macro renderButton(option) %}
    {% import _self as self %}
    {
        {% if option.extend is defined %}"extend": "{{ option.extend }}",{% endif %}
        {% if option.className is defined %}"className": "{{ option.className }}",{% endif %}
        {% if option.text is defined %}"text": "{{ option.text|e('js') }}",{% endif %}
        {% if option.fade is defined %}"fade": {{ option.fade }},{% endif %}
        {% if option.autoClose is defined %}"autoClose": {{ option.autoClose ? 'true' : 'false' }},{% endif %}
        {% if option.action is defined %}"action": {{ include(option.action|raw) }},{% endif %}
        {% if option.exportOptions is defined %}"exportOptions": {{ option.exportOptions|json_encode|raw }},{% endif %}
        {% if option.buttons is defined %}
            "buttons":[
                {% for subButton in option.buttons %}
                    {{ self.renderButton(subButton) }}
                {% endfor %}
            ]
        {% endif %}
    },
{% endmacro %}

{% from _self import renderButton %}
{% for extension, options in view_features.extensions %}
    {% if 'buttons' == extension %}
        "buttons": [
            {% for option in options %}
                {{ renderButton(option) }}
            {% endfor %}
        ],
    {% else %}
        "{{ extension }}": {{ options|json_encode|raw }},
    {% endif %}
{% endfor %}
