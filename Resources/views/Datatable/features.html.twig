{% import '@SgDatatables/Helper/macros.html.twig' as macros %}

{##
 # This file is part of the SgDatatablesBundle package.
 #
 # (c) stwe <https://github.com/stwe/DatatablesBundle>
 #
 # For the full copyright and license information, please view the LICENSE
 # file that was distributed with this source code.
 #}
"autoWidth":    {{ macros.js_bool(view_features.autoWidth) }},
"deferRender":  {{ macros.js_bool(view_features.deferRender) }},
"info":         {{ macros.js_bool(view_features.info) }},
"jQueryUI":     {{ macros.js_bool(view_features.jQueryUI) }},
"lengthChange": {{ macros.js_bool(view_features.lengthChange) }},
"ordering":     {{ macros.js_bool(view_features.ordering) }},
"paging":       {{ macros.js_bool(view_features.paging) }},
"processing":   {{ macros.js_bool(view_features.processing) }},
"scrollX":      {{ macros.js_bool(view_features.scrollX) }},
"scrollY":      "{{ view_features.scrollY }}",
"searching":    {{ macros.js_bool(view_features.searching) }},
"stateSave":    {{ macros.js_bool(view_features.stateSave) }},
"delay":        {{ view_features.delay }},

{% macro renderButton(option) %}
    {% import _self as self %}
    {% import '@SgDatatables/Helper/macros.html.twig' as macros %}
    {
        {% if option.extend is defined %}"extend": "{{ option.extend }}",{% endif %}
        {% if option.columns is defined %}"columns": "{{ option.columns }}",{% endif %}
        {% if option.className is defined %}"className": "{{ option.className }}",{% endif %}
        {% if option.text is defined %}"text": "{{ option.text|e('js') }}",{% endif %}
        {% if option.fade is defined %}"fade": {{ option.fade }},{% endif %}
        {% if option.autoClose is defined %}"autoClose": {{ macros.js_bool(option.autoClose) }},{% endif %}
        {% if option.exportOptions is defined %}"exportOptions": {{ option.exportOptions|json_encode|raw }},{% endif %}
        {% if option.editor is defined and option.editor %}"editor": editor,{% endif %}
        {% if option.buttons is defined %}
            "buttons":[
                {% for subButton in option.buttons %}
                    {{ self.renderButton(subButton) }}
                {% endfor %}
            ],
        {% endif %}
        {% if option.action is defined %}
            "action": {{ macros.include_with_vars(option.action) }},
        {% endif %}
    },
{% endmacro %}

{% from _self import renderButton %}
{% for extension, options in view_features.extensions %}
    {% if 'buttons' == extension %}
        "buttons": [
            {% for option in options %}
                {{ renderButton(option) }}
            {% endfor %}
        ],
    {% else %}
        "{{ extension }}": {{ options|json_encode|raw }},
    {% endif %}
{% endfor %}
