{##
 # This file is part of the SgDatatablesBundle package.
 #
 # (c) stwe <https://github.com/stwe/DatatablesBundle>
 #
 # For the full copyright and license information, please view the LICENSE
 # file that was distributed with this source code.
 #}
{% block renderFunctions %}
var renderFunctionsAlreadyLoaded = true;

function render_boolean(data, type, row, meta, trueIcon, falseIcon, trueLabel, falseLabel) {
    if ("" == trueIcon && "" == trueLabel) {
        trueLabel = "true";
    }

    if ("" == falseIcon && "" == falseLabel) {
        falseLabel = "false";
    }

    if (data == true) {
        return "<span class='" + trueIcon + "'></span> " + trueLabel;
    } else {
        return "<span class='" + falseIcon + "'></span> " + falseLabel;
    }
}

function render_datetime(data, type, row, meta, dateFormat) {
    if (data != null && typeof data.timestamp != "undefined") {
        moment.locale("{{ app.request.locale }}");
        return moment.unix(data.timestamp).format(dateFormat);
    } else {
        return null;
    }
}

function render_timeago(data, type, row, meta) {
    if (data != null && typeof data.timestamp != "undefined") {
        moment.locale("{{ app.request.locale }}");
        return moment.unix(data.timestamp).fromNow();
    } else {
        return null;
    }
}

function render_progress_bar(data, type, row, meta, barClasses, min, max, label, multi) {
    if (!data) {
        return '';
    }

    var valueNow = 'aria-valuenow="' + data + '"';
    var valueMin = 'aria-valuemin="' + min + '"';
    var valueMax = 'aria-valuemax="' + max + '"';
    var intData = parseInt(data, 10);
    var size = (intData-min)*100/(max-min);
    var classNames = 'class="progress-bar ';

    if (true == multi) {
        if (size <= 35) {
            classNames += 'progress-bar-success' + '"';
        }
        if (size > 35 && size <= 70) {
            classNames += 'progress-bar-warning' + '"';
        }
        if (size > 70) {
            classNames += 'progress-bar-danger' + '"';
        }
    } else {
        classNames += barClasses + '"';
    }

    var style = 'style="width:' + size +  '%; color: black;"';
    var result = '<div class="progress">';
        result += '<div ' + classNames;
        result += 'role="progressbar"' + valueNow + ' ' + valueMin + ' ' + valueMax + ' ' + style + '>';
        if (true == label) {
            result += data;
        }
        result += '</div></div>';

    return result;
}

function render_ellipsis(data, type, row, meta, cutoff, wordbreak, escapeHtml) {
    if (!data) {
        return '';
    }

    var esc = function ( t ) {
        return t
            .replace( /&/g, '&amp;' )
            .replace( /</g, '&lt;' )
            .replace( />/g, '&gt;' )
            .replace( /"/g, '&quot;' );
    };

    data = data.toString(); // cast numbers

    if ( data.length <= cutoff ) {
        return data;
    }

    var shortened = data.substr(0, cutoff-1);

    // Find the last white space character in the string
    if ( wordbreak ) {
        shortened = shortened.replace(/\s([^\s]*)$/, '');
    }

    // Protect against uncontrolled HTML input
    if ( escapeHtml ) {
        shortened = esc( shortened );
    }

    return '<span class="ellipsis" title="'+esc(data)+'">'+shortened+'&#8230;</span>';
}
{% endblock renderFunctions %}
