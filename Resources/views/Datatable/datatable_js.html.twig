<script type="text/javascript">
    {% if true == view_options.isLoadOnDocumentReady %}
        $(document).ready(function()
        {
            initialize_{{ view_table_id }}();
        });
    {% endif %}

    function initialize_{{ view_table_id }}(finalOptions) {
        finalOptions = finalOptions === undefined ? {} : finalOptions;

        //small delay helper method
        var delayCancel = (function(){
            var timer = 0;
            return function (callback, ms) {
                clearTimeout(timer);
                timer = setTimeout(callback, ms);
            };
        })();

        if (typeof window.pipelineFunctionAlreadyLoaded == 'undefined') {
            {% if view_ajax.pipeline > 0 %}
                {% include "SgDatatablesBundle:Datatable:pipeline.js.twig" %}
            {% endif %}
        }

        var selector = "#{{ view_table_id }}";

        var defaults = {
            {% include "SgDatatablesBundle:Datatable:language.html.twig" %}
        };

        var features = {
            {% include "SgDatatablesBundle:Datatable:features.html.twig" %}
        };

        var options = {
            {% include "SgDatatablesBundle:Datatable:options.html.twig" %}
        };

        var callbacks = {
            {% include "SgDatatablesBundle:Datatable:callbacks.html.twig" %}
        };

        var ajax = {
            {% include "SgDatatablesBundle:Datatable:ajax.html.twig" %}
        };

        var searchCols = {
            {% include "SgDatatablesBundle:Datatable:search_columns.html.twig" %}
        };

        {% if view_features.delay > 0 %}setTimeout(function (){{ '{' }}{% endif %}
            var columns = {
                {% include "SgDatatablesBundle:Datatable:columns.html.twig" %}
            };

            $.extend(defaults, features);
            $.extend(defaults, options);
            $.extend(defaults, callbacks);
            $.extend(defaults, ajax);
            $.extend(defaults, columns);
            $.extend(defaults, searchCols);
            $.extend(true, defaults, finalOptions);

            if ($.fn.DataTable.isDataTable(selector)) {
                return;
            }

            var oTable = $(selector)
            {# Use the Button-Extension with integration options #}
            {% if view_features.extensions.buttons is defined %}
                {% if true == view_options.useIntegrationOptions and false == view_options.getForceDom %}
                    .on('init.dt',
                        function () {
                            if ('bootstrap' == oTable.context[0].renderer) {
                                oTable.buttons().container().appendTo('#' + oTable.table().container().id + ' .col-sm-6:eq(0)');
                            }

                            if ('foundation' == oTable.context[0].renderer) {
                                oTable.buttons().container().appendTo('#' + oTable.table().container().id + ' .small-6.columns:eq(0)');
                            }

                            if ('jqueryui' == oTable.context[0].renderer) {
                                oTable.buttons().container().appendTo('#' + oTable.table().container().id);
                            }
                        }
                    )
                {% endif %}
            {% endif %}
            {% include "SgDatatablesBundle:Datatable:before_events.js.twig" %}
            .DataTable(defaults)
            .on('draw.dt', function () {
                {% include "SgDatatablesBundle:Datatable:editable.html.twig" %}
                {% if true == view_features.highlight %}
                {% include "SgDatatablesBundle:Datatable:highlight.js.twig" %}
                {% endif %}
            })
            {% include "SgDatatablesBundle:Datatable:after_events.js.twig" %}
            {% if view_features.extensions.responsive is defined %}
                {% if true == view_features.extensions.responsive %}
                    .on('responsive-display', function (e, datatable, row, showHide, update) {
                        if (showHide) {
                            {% include "SgDatatablesBundle:Datatable:editable.html.twig" %}
                        }
                    });
                {% endif %}
            {% endif %}

        //rebind global search input because I think it fires way to many times
        $(selector).parents('.dataTables_wrapper').find('.dataTables_filter input[type="search"]').each(function () {
            var searchInput = $(this);
            searchInput
                .unbind()
                .on('input', function () {
                    delayCancel(function () {
                        oTable.search(searchInput.val()).draw();
                    }, {{ view_options.searchDelay }});
                });
        });

        {% if view_options.individualFiltering %}
            {% include "@SgDatatables/Datatable/individual_filter.js.twig" %}
        {% endif %}

        {% if view_multiselect %}
            {% include "SgDatatablesBundle:Action:multiselect_actions.html.twig" with {'column': view_multiselect_column} %}
        {% endif %}

        {% if view_features.delay > 0 %}{{ '}, '~view_features.delay~');' }}{% endif %}

        //return datatable handle or selector if not available
        return oTable === undefined ? selector : oTable;
    }

</script>

{% block sg_datatable_render_functions %}

    <script type="text/javascript">
        if (typeof window.renderFunctionsAlreadyLoaded == 'undefined') {
            {% include "SgDatatablesBundle:Datatable:render_functions.js.twig" %}
        }
    </script>

{% endblock %}
