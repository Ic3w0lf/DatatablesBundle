{##
 # This file is part of the SgDatatablesBundle package.
 #
 # (c) stwe <https://github.com/stwe/DatatablesBundle>
 #
 # For the full copyright and license information, please view the LICENSE
 # file that was distributed with this source code.
 #}
{% extends 'SgDatatablesBundle:Filters:filter.html.twig' %}

{% block html %}
    <select
        {% if column.filter.multiple %}multiple="multiple"{% endif %}
        id="{{ tableId }}-sg-filter-{{ selectorId }}"
        class="individual_filtering {{ column.filter.class|default(defaultFilterClass) }}"
        style="width:{{ column.width|default('100%') }};"
        data-filter-column-name="{{ column.name }}">
        {% for key, name in column.filter.selectOptions %}
            <option value="{{ key }}">{{ name }}</option>
        {% endfor %}
    </select>
{% endblock %}

{% block javascript %}
    {{ parent() }}

    <script>
        window.DTdeferAfterjQueryLoaded.push(function() {
            $(document).ready(function () {
                $('#{{ tableId }}-sg-filter-{{ selectorId }}').select2({
                    {% if column.filter.placeholder %}placeholder: "{{ column.filter.placeholder }}",{% endif %}
                    tags: {{ column.filter.tags ? 'true' : 'false' }},
                    allowClear: {{ column.filter.allowClear ? 'true' : 'false' }},
                    language: "{{ column.filter.language }}",
                    dropdownAutoWidth : true,
                    {% if column.filter.url %}
                    ajax: {
                        url: "{{ path(column.filter.url) }}",
                        dataType: 'json',
                        delay: {{ column.filter.delay }},
                        cache: {{ column.filter.cache ? 'true' : 'false' }},
                        data: function (params) {
                            return {
                                term: params.term,
                                page: params.page,
                                origin: 'grid'
                            };
                        },
                        processResults: function (data, params) {
                            params.page = params.page || 1;

                            var resultArray = [];
                            $.each(data.results, function (idx, object) {
                                resultArray.push({
                                    id :   object.text,
                                    text : object.text
                                });
                            });

                            return {
                                results: resultArray,
                                pagination: {
                                    more: (params.page * 30) < data.total_count
                                }
                            };
                        }
                    },
                    {% endif %}
                });
            });
        });
    </script>
{% endblock %}
